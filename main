Ques1 1.
vector<int> diStringMatch(string s) {
        int n=s.size(),ptr1=0,ptr2=n;
        vector<int> ans;
        for(int i=0;i<n;i++){
            if(s[i]=='I'){
                ans.push_back(ptr1);
                ptr1++;
            }
            else{
                ans.push_back(ptr2);
                ptr2--;
            }
        }
        ans.push_back(ptr1);
        return ans;
    }


Quesn 2.
bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size();
        int m = matrix[0].size();
        int low = 0;
        int high = (n*m)-1;
        while(low<=high){
            int mid = low + (high-low)/2;
            if(matrix[mid/m][mid%m]==target){
                return true;
            }
            if(matrix[mid/m][mid%m]<target){
                low = mid+1;
            }
            else{
                high = mid-1;
            }
        }
        return false;
    }



Quesn 3.
bool validMountainArray(vector<int>& A) {
        int N = A.size();
        int i = 0;
        while (i+1 < N && A[i] < A[i+1]) i++;
        if (i == 0 || i == N-1)
            return false;
        while (i+1 < N && A[i] > A[i+1])i++;
        return i == N-1;
    }
